<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://seunghyum.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://seunghyum.github.io/" rel="alternate" type="text/html" /><updated>2021-01-15T16:30:26+09:00</updated><id>https://seunghyum.github.io/feed.xml</id><title type="html">eveloper Dave</title><subtitle>데이터 시각화에 관심이 많은 개발자입니다.</subtitle><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><entry><title type="html">[Tutorial] Storybook과 Bit을 활용한 UI 컴포넌트 관리(Workflow)</title><link href="https://seunghyum.github.io/frontend/tutorial/workflow/Storybook-bit-simulation/" rel="alternate" type="text/html" title="[Tutorial] Storybook과 Bit을 활용한 UI 컴포넌트 관리(Workflow)" /><published>2019-12-27T00:00:00+09:00</published><updated>2019-12-27T00:00:00+09:00</updated><id>https://seunghyum.github.io/frontend/tutorial/workflow/Storybook-bit-simulation</id><content type="html" xml:base="https://seunghyum.github.io/frontend/tutorial/workflow/Storybook-bit-simulation/">&lt;p&gt;회사에서 프론트엔드 개발원칙을 SFC(Single File Component)에서 UI 컴포넌트를 기준으로 CDD(Component Driven Development)를 진행하려고 한다.&lt;br /&gt;
그래서 체계적으로 관리하기위해 &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt;과 &lt;a href=&quot;http://bit.dev/&quot;&gt;Bit&lt;/a&gt;을 도입해보고자 한다.&lt;br /&gt;
각각의 역할은&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Storybook : UI 컴포넌트 모음 레포, UI 컴포넌트 명세서&lt;/li&gt;
  &lt;li&gt;Bit : UI 컴포넌트 공유. 개별 컴포넌트 단위 관리(import, export, version) Cloud
이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다시말해 Storybook 은 UI 컴포넌트 단위로 만들어 놓고, Bit은 개별 컴포넌트를 공유하는 클라우드의 역할을 한다.&lt;/p&gt;

&lt;h2 id=&quot;시연해볼-구조&quot;&gt;시연해볼 구조&lt;/h2&gt;
&lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/workflow_bit.dev.png&quot; style=&quot;margin:auto;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/workflow/workflow_bit.dev.png&quot; style=&quot;max-width:600px;&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;setting--start&quot;&gt;Setting &amp;amp; Start&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn
$ yarn storybook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;work-flow-시연&quot;&gt;Work Flow 시연&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;대상 Bit 레포 &lt;a href=&quot;https://bit.dev/seunghyum/virnect-test&quot;&gt;주소&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Export 해볼 레포 &lt;a href=&quot;https://github.com/Seunghyum/virnect-storybook-bit-test&quot;&gt;주소&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Import는 로컬에서&lt;/li&gt;
  &lt;li&gt;Bit 계정에 로그인하지 않고 CLI만 설치하면 가져다 쓸 수 있음. Bit으로 Export 만 로그인 필요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-storybook-시연&quot;&gt;1. Storybook 시연&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn storybook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-bit-시연&quot;&gt;2. Bit 시연&lt;/h2&gt;

&lt;h3 id=&quot;export-to-bit&quot;&gt;Export to Bit&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Bit의 컬렉션과 컴포넌트 설명 : &lt;a href=&quot;https://bit.dev/seunghyum/virnect-test&quot;&gt;주소&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;로그인&lt;/li&gt;
  &lt;li&gt;Storybook 레포지토리(여기)에서 Bit cloud로 export할 대상 컴포넌트를 아래의 명령어로 추가
    &lt;ul&gt;
      &lt;li&gt;추가시 파일내에서 Import한 것들도 추가해주어야함.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ bit add &amp;lt;Bit에 추가할 대상 컴포넌트 path&amp;gt; --id &amp;lt;컴포넌트 이름 설정&amp;gt;

 // 예시
 $ bit add ./src/components/Button/Button.vue --id virnect-button
 $ bit add src/utils/color.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;태그 입력
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ bit tag --all 1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;상태 확인
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ bit status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;푸시
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ bit export &amp;lt;유저명&amp;gt;.&amp;lt;컬렉션 이름&amp;gt;

 // 예시
 $ bit export seunghyum.virnect-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;import-from-bit&quot;&gt;import from Bit&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;로컬 프로젝트 만들기
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ vue create test-storybook-bit
  $ cd test-storybook-bit
  $ yarn
  $ yarn serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Bit에서 필요한 컴포넌트만 가져오기
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ bit import &amp;lt;유저명&amp;gt;.&amp;lt;컬렉션명&amp;gt;/&amp;lt;컴포넌트 이름&amp;gt;

 // 예시
 $ bit import seunghyum.virnect-test/virnect-button
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;node_modules 파일안의 @bit 폴더에 저장됨.&lt;/li&gt;
  &lt;li&gt;import 콜렉션이름 from ‘@bit/…‘으로 가져와 쓸 수 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;p&gt;UI 컴포넌트 참고 사이트 : https://bit.dev/lusaxweb&lt;/p&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Frontend" /><category term="Tutorial" /><category term="Workflow" /><summary type="html">회사에서 프론트엔드 개발원칙을 SFC(Single File Component)에서 UI 컴포넌트를 기준으로 CDD(Component Driven Development)를 진행하려고 한다. 그래서 체계적으로 관리하기위해 Storybook과 Bit을 도입해보고자 한다. 각각의 역할은 Storybook : UI 컴포넌트 모음 레포, UI 컴포넌트 명세서 Bit : UI 컴포넌트 공유. 개별 컴포넌트 단위 관리(import, export, version) Cloud 이다.</summary></entry><entry><title type="html">[Scaffold] Scaffold Module 개발</title><link href="https://seunghyum.github.io/scaffold/Scafflod-Modules/" rel="alternate" type="text/html" title="[Scaffold] Scaffold Module 개발" /><published>2019-12-27T00:00:00+09:00</published><updated>2019-12-27T00:00:00+09:00</updated><id>https://seunghyum.github.io/scaffold/Scafflod-Modules</id><content type="html" xml:base="https://seunghyum.github.io/scaffold/Scafflod-Modules/">&lt;h2 id=&quot;도입-이유&quot;&gt;도입 이유&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SI 작업은 울며 겨자먹기식이나 회사 전체 프로젝트가 SI 작업 때문에 진도가 잘 안나감.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scaffolding-module-설명&quot;&gt;Scaffolding Module 설명&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Scaffolding 용어
    &lt;ul&gt;
      &lt;li&gt;네이버 어학사전 - (공사장에서 안전을 위해 외부로 설치하는) 뼈대&lt;/li&gt;
      &lt;li&gt;Stackoverflow - Scaffolding generally refers to a &lt;strong&gt;quickly set up skeleton for an app&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;다음 검색 - 컴퓨터 용어에서 스캐폴딩은 데이터베이스의 각 테이블에 대한 웹 페이지를 자동으로 생성하는 Dynamic Data 요소를 말합니다. 자동 생성된 웹 페이지를 통해 각 테이블에 대해 만들기, 읽기, 업데이트 및 삭제(CRUD) 작업을 수행할 수 있습니다. 스캐폴딩은 페이지 템플릿, 엔터티 페이지 템플릿, 필드 페이지 템플릿 및 필터 템플릿으로 구성됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rails의 Scaffolding은 간단한 명령어로 Model, View, Controller등 모든 구성요소(파일구조, 코드)를 알아서 만들어 줌.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href=&quot;/assets/images/posts/workflow/1_1_xbp-fx7Dz7B90Ijlsw6Q.png&quot; style=&quot;margin:auto;&quot;&gt;
&lt;img src=&quot;/assets/images/posts/workflow/1_1_xbp-fx7Dz7B90Ijlsw6Q.png&quot; style=&quot;border:none;&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;
&lt;ul&gt;
  &lt;li&gt;이처럼 SI 프로젝트에서 공유될만한 것들을 scaffolding Module로 빼서 개발하는 것이 목표.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기능모듈--ui-컴포넌트-모듈과의-차이점&quot;&gt;기능모듈 &amp;amp; UI 컴포넌트 모듈과의 차이점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트마다 기능모듈과 UI 컴포넌트 모듈을 &lt;strong&gt;포함할수도, 포함하지 않을 수도 있음.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Scaffold의 목적은 “SI 작업 비용을 최소화하는 코드 템플릿”&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
&lt;a href=&quot;/assets/images/posts/workflow/scaffold_modules.png&quot; style=&quot;margin:auto;&quot;&gt;
&lt;img src=&quot;/assets/images/posts/workflow/scaffold_modules.png&quot; style=&quot;max-width: 500px; border:none;&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;a href=&quot;/assets/images/posts/workflow/scaffold_modules_all.png&quot; style=&quot;margin:auto;&quot;&gt;
&lt;img src=&quot;/assets/images/posts/workflow/scaffold_modules_all.png&quot; style=&quot;border:none;&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;도입-이후-장점&quot;&gt;도입 이후 장점&lt;/h2&gt;

&lt;p&gt;SI 작업에 드는 비용 감소. 작업시간 단축.&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;/assets/images/posts/workflow/scaffold_modules_eff.png&quot; style=&quot;margin:auto;&quot;&gt;
&lt;img src=&quot;/assets/images/posts/workflow/scaffold_modules_eff.png&quot; style=&quot;max-width: 300px;border:none;&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;도입-이후-위험성&quot;&gt;도입 이후 위험성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;모듈화 작업에 들어가는 폼이 많을 수 있음. → 모듈화 이슈는 서브 챕터에서 공유&lt;/li&gt;
  &lt;li&gt;모듈에 맞춰서 고객의 요청을 미리 제한할 수 있어야함. ex - 기획, 디자인시 모듈에 맞게끔 유도해야할 수 있음&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Scaffold" /><summary type="html">도입 이유</summary></entry><entry><title type="html">[Workflow] 프론트엔드 개발조직을 위한 워크플로 설계</title><link href="https://seunghyum.github.io/workflow/Workflow-Design-for-frontend/" rel="alternate" type="text/html" title="[Workflow] 프론트엔드 개발조직을 위한 워크플로 설계" /><published>2019-12-24T00:00:00+09:00</published><updated>2019-12-24T00:00:00+09:00</updated><id>https://seunghyum.github.io/workflow/Workflow-Design-for-frontend</id><content type="html" xml:base="https://seunghyum.github.io/workflow/Workflow-Design-for-frontend/">&lt;blockquote&gt;
  &lt;h2 id=&quot;작성-배경&quot;&gt;작성 배경&lt;/h2&gt;

  &lt;p&gt;회사의 작업구조를 &lt;strong&gt;페이지 중심 개발&lt;/strong&gt;에서 &lt;strong&gt;UI 컴포넌트 중심 개발&lt;/strong&gt;로 변경하면서 Workflow를 개선할만한 환경을 구성해야했다.&lt;br /&gt;
폐쇄망 기반에서 개발자간 UI 명세서 역할을 할 수 있는 &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt;과&lt;br /&gt;
그것을 공유할 &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot;&gt;Verdaccio&lt;/a&gt;라는 구축형 NPM Private Registry를 도입하면 좋겠다는 생각에 아래의 내용을 팀에 제안했다.&lt;br /&gt;
또한 기존의 프로젝트 중심에서 Task중심으로 업무프로세스를 변화하여 애자일에 적합하게 Workflow를 구성해보았다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;ui-컴포넌트-모듈관리--storybook&quot;&gt;UI 컴포넌트 모듈관리 : Storybook&lt;/h1&gt;

&lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/design-system-contents.jpg&quot; style=&quot;margin:auto;&quot;&gt;
    &lt;img src=&quot;/assets/images/posts/workflow/design-system-contents.jpg&quot; style=&quot;max-width: 400px;border:none;&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;시연 : &lt;a href=&quot;https://seunghyum.github.io/VirnectStorybookTest/?path=/story/*&quot;&gt;스토리북 시연&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;설명
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ant.design/docs/react/introduce&quot;&gt;Ant&lt;/a&gt;, &lt;a href=&quot;https://material.io/components/&quot;&gt;materialize&lt;/a&gt; 같은 사이트처럼 문서 기능(UI 컴포넌트 개발 명세서)&lt;/li&gt;
      &lt;li&gt;회귀 테스트 가능(ex- 디바이스 크기별 체크가능 / 중국어, 영어등 외국어 일경우 UI 변화도 체크가능 등등)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;목표&quot;&gt;목표&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Page기반 → UI 컴포넌트 기반으로 전환 과정에서 개발 &amp;amp; 디자인 Work flow 개선
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;구조도&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/Workflow__-_Storybook__Verdaccio.png&quot; style=&quot;margin:auto;&quot;&gt;
    &lt;img src=&quot;/assets/images/posts/workflow/Workflow__-_Storybook__Verdaccio.png&quot; style=&quot;border:none;&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;구조도 상세 설명&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;프로젝트 중심 → Task 중심&lt;/li&gt;
        &lt;/ul&gt;

        &lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;b&gt;작업과정&lt;/b&gt;
&lt;/div&gt;

        &lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/work_process.png&quot; style=&quot;margin:auto;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/workflow/work_process.png&quot; style=&quot;max-width: 500px; border:none;&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
        &lt;hr /&gt;
        &lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;b&gt;공유 과정&lt;/b&gt;
&lt;/div&gt;

        &lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/work_process2.png&quot; style=&quot;margin:auto;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/workflow/work_process2.png&quot; style=&quot;max-width: 500px; border:none;&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
      &lt;/li&gt;
      &lt;li&gt;쓰임세
        &lt;ul&gt;
          &lt;li&gt;개발 : 공통 디자인 컴포넌트 관리, UI 컴포넌트 명세서&lt;/li&gt;
          &lt;li&gt;디자인 : 실제 웹 상에서의 시각 테스트(Storybook)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;

    &lt;p&gt;단, 디자인 / 개발 파트의 효용성을 계속 생각하며 &lt;strong&gt;고도화&lt;/strong&gt;해야 함.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;회귀 테스트(모바일, 태블릿, 데스크탑 화면 조정 가능)
        &lt;ul&gt;
          &lt;li&gt;함께 쓰면 좋은 크롬 확장프로그램 : chrome toogle device topbar, stylebot, colorpick eyeDroper&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;디자인적인 효용성
        &lt;ul&gt;
          &lt;li&gt;실제 웹에선 어떻게 나오는지를 확인할 수 있음. → 하지만 실제 구현 페이지에서는 다르게 보일 수 있음. 결국은 실제 서비스 페이지에서 확인해야함.&lt;/li&gt;
          &lt;li&gt;해당 UI를 마음대로 값을 조정하여 변수들을 체크해볼 수 있음.&lt;/li&gt;
          &lt;li&gt;국제화 표준값을 변경해보며 UI 확인이 가능.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;개발적인 효용성
        &lt;ul&gt;
          &lt;li&gt;UI 코드 명세서(어떻게 생겼고 어떻게 사용해야하는지)&lt;/li&gt;
          &lt;li&gt;단위 테스트에 적합(인터렉티브한 UI에 한해서만 해야함.)&lt;/li&gt;
          &lt;li&gt;프로젝트 중심 → Task 중심으로 조금은 바꿀 수 있음. 스프린트도 가능.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/Task_.png&quot; style=&quot;margin:auto;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/workflow/Task_.png&quot; style=&quot;max-width: 500px; border:none;&quot; /&gt;
  &lt;/a&gt;
&lt;/figure&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;위험성&quot;&gt;위험성&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;디자인 파트&lt;/em&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;제플린같은 디자인 툴을 사용하는 편이 더 나을 때가 많음. 실제 웹에서 어떻게 구현되는가를 컴포넌트별로 체크할때만 효용성이 있음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;개발 파트&lt;/em&gt;&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;오버 엔지니어링 : 단위테스트가 필요없을 정도로 마이너한 일들은 명세서의 역할만 할 정도로 개발. → &lt;strong&gt;모듈화가 필요할때마다 개발 구성원 모두가 검토하는 프로세스가 필요함&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;개발기한 → 지금은 UI 컴포넌트 개발과 프론트앤드 기능개발을 병렬적으로 해야함.&lt;/li&gt;
      &lt;li&gt;아래의 그림처럼 운영하는 웹 어플리케이션들에서 막상 공유되는것이 없거나 적을 경&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width: 49%; display:inline-block; text-algin: center;&quot;&gt;
  &lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/danger_point.png&quot; style=&quot;margin:auto;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/workflow/danger_point.png&quot; style=&quot;height: 85%; border:none;&quot; /&gt;
  &lt;/a&gt;
  &lt;/figure&gt;
  &lt;p&gt;
    [모듈화 위험 있음]
  &lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width: 49%; display:inline-block; text-algin: center;&quot;&gt;
  &lt;figure&gt;
  &lt;a href=&quot;/assets/images/posts/workflow/design-system-contents.jpg&quot; style=&quot;margin:auto;&quot;&gt;
  &lt;img src=&quot;/assets/images/posts/workflow/design-system-contents.jpg&quot; style=&quot;border:none;&quot; /&gt;
  &lt;/a&gt;
  &lt;/figure&gt;
  &lt;p&gt;
    [모듈화 적합]
  &lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;계획&quot;&gt;계획&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;개발 구성원들이 다 바빠서 실제 활용은 내년 예상.&lt;/li&gt;
  &lt;li&gt;일단 구조부터 만들기. - 승현&lt;/li&gt;
  &lt;li&gt;xxxx&lt;a href=&quot;http://virnect.github.io&quot;&gt;.github.io&lt;/a&gt; 에 Storybook 배포&lt;/li&gt;
  &lt;li&gt;디자인에 맞춰서 도입이 필요 없을 경우엔 Skip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;기능-모듈-공유--verdaccio&quot;&gt;기능 모듈 공유 : Verdaccio&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;기능 모듈 공유 : &lt;a href=&quot;https://github.com/verdaccio/verdaccio&quot;&gt;Verdaccio&lt;/a&gt; (구축형 NPM Private to 개발서버)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;a href=&quot;/assets/images/posts/workflow/Workflow__-_Storybook__Verdaccio.png&quot; style=&quot;margin:auto;&quot;&gt;
&lt;img src=&quot;/assets/images/posts/workflow/Workflow__-_Storybook__Verdaccio.png&quot; style=&quot;max-height: 300px; border:none;&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;설명&quot;&gt;설명&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;npm install 시에 &lt;a href=&quot;https://registry.npmjs.org/&quot;&gt;https://registry.npmjs.org&lt;/a&gt; 에서 기본적으로 패키지를 가져옴.&lt;/li&gt;
  &lt;li&gt;이것을 개발 서버에 구축형(Verdaccio)으로 만든다.&lt;/li&gt;
  &lt;li&gt;UI 컴포넌트, 기능 모듈을 각각 1개씩 레포를 만든다. 각 레포는 Mono 레포의 구조로 모듈들을 관리한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시연&quot;&gt;시연&lt;/h2&gt;

&lt;h3 id=&quot;ui-컴포넌트-공유&quot;&gt;UI 컴포넌트 공유&lt;/h3&gt;

&lt;figure&gt;
&lt;a href=&quot;/assets/images/posts/workflow/Verdaccio_Storybook_Case_1.png&quot; style=&quot;margin:auto;&quot;&gt;
&lt;img src=&quot;/assets/images/posts/workflow/Verdaccio_Storybook_Case_1.png&quot; style=&quot;border:none;&quot; /&gt;
&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;도입의-장점&quot;&gt;도입의 장점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;작업 구조의 변화
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;프로젝트 중심&lt;/strong&gt;으로 개발자 개인이 하나씩 맡아서 돌아가는 구조를 &lt;strong&gt;Task 중심&lt;/strong&gt;으로 바꿀 수 있지 않을까. → 코드 퀄리티, 개인의 업무 과중 해소.&lt;/li&gt;
      &lt;li&gt;ex) A개발자는 프로젝트  a와 b 라는 인풋이 주어질 경우 c라는 결과물만 나오는 기능 작업&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zerocho.com/category/NodeJS/post/58285e4840a6d700184ebd87&quot;&gt;NPM 명령어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Workflow" /><summary type="html">작성 배경 회사의 작업구조를 페이지 중심 개발에서 UI 컴포넌트 중심 개발로 변경하면서 Workflow를 개선할만한 환경을 구성해야했다. 폐쇄망 기반에서 개발자간 UI 명세서 역할을 할 수 있는 Storybook과 그것을 공유할 Verdaccio라는 구축형 NPM Private Registry를 도입하면 좋겠다는 생각에 아래의 내용을 팀에 제안했다. 또한 기존의 프로젝트 중심에서 Task중심으로 업무프로세스를 변화하여 애자일에 적합하게 Workflow를 구성해보았다.</summary></entry><entry><title type="html">[Git] Git Command 정리</title><link href="https://seunghyum.github.io/git/Git-Command/" rel="alternate" type="text/html" title="[Git] Git Command 정리" /><published>2019-11-24T00:00:00+09:00</published><updated>2019-11-24T00:00:00+09:00</updated><id>https://seunghyum.github.io/git/Git-Command</id><content type="html" xml:base="https://seunghyum.github.io/git/Git-Command/">&lt;h2 id=&quot;git-시스템-이해하기&quot;&gt;Git 시스템 이해하기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 깃 히스토리는 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git init&lt;/code&gt;을 한 로컬에서 .git 폴더에서 관리됨. &lt;br /&gt;
Git의 주목적은 프로젝트의 스냅샷을 지속적으로 저장하는 것이다. 트리 세 개를 사용해 더 나은 상태로 관리한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;펌 : &lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0#_git_reset&quot;&gt;7.7 Git 도구 - Reset 명확히 알고 가기&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;트리&lt;/th&gt;
      &lt;th&gt;역할&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;HEAD&lt;/td&gt;
      &lt;td&gt;마지막 커밋 스냅샷, 다음 커밋의 부모 커밋&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Index&lt;/td&gt;
      &lt;td&gt;다음에 커밋할 스냅샷&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working Directory&lt;/td&gt;
      &lt;td&gt;샌드박스. 지금 작업하고 있는 위치&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/git_three_tree.png&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/git_three_tree.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;h3 id=&quot;세-개의-트리&quot;&gt;세 개의 트리&lt;/h3&gt;

&lt;p&gt;Git을 서로 다른 세 트리를 관리하는 컨텐츠 관리자로 생각하면 reset 과 checkout 을 좀 더 쉽게 이해할 수 있다. 여기서 “트리” 란 실제로는 “파일의 묶음” 이다. 자료구조의 트리가 아니다 (세 트리 중 Index는 트리도 아니지만, 이해를 쉽게 하려고 일단 트리라고 한다).&lt;/p&gt;

&lt;p&gt;Git은 일반적으로 세 가지 트리를 관리하는 시스템이다.&lt;/p&gt;

&lt;h3 id=&quot;head&quot;&gt;HEAD&lt;/h3&gt;

&lt;p&gt;HEAD는 현재 브랜치를 가리키는 포인터이며, 브랜치는 브랜치에 담긴 커밋 중 가장 마지막 커밋을 가리킨다. 지금의 HEAD가 가리키는 커밋은 바로 다음 커밋의 부모가 된다. 단순하게 생각하면 HEAD는 &lt;em&gt;현재 브랜치 마지막 커밋의 스냅샷&lt;/em&gt;이다.&lt;/p&gt;

&lt;h3 id=&quot;index&quot;&gt;Index&lt;/h3&gt;

&lt;p&gt;Index는 바로 다음에 커밋할 것들이다. 이미 앞에서 우리는 이런 개념을 “Staging Area” 라고 배운 바 있다. “Staging Area” 는 사용자가 git commit 명령을 실행했을 때 Git이 처리할 것들이 있는 곳이다.&lt;/p&gt;

&lt;p&gt;먼저 Index는 Working Directory에서 마지막으로 Checkout 한 브랜치의 파일 목록과 파일 내용으로 채워진다. 이후 파일 변경작업을 하고 변경한 내용으로 Index를 업데이트 할 수 있다. 이렇게 업데이트 하고 git commit 명령을 실행하면 Index는 새 커밋으로 변환된다.&lt;/p&gt;

&lt;p&gt;Index는 엄밀히 말해 트리구조는 아니다. 사실 Index는 평평한 구조로 구현되어 있다. 여기에서는 쉽게 이해할 수 있도록 그냥 트리라고 설명한다.&lt;/p&gt;

&lt;h3 id=&quot;working-directory&quot;&gt;Working Directory&lt;/h3&gt;

&lt;p&gt;마지막으로 Working Directory를 살펴보자. 위의 두 트리는 파일과 그 내용을 효율적인 형태로 .git 디렉토리에 저장한다. 하지만, 사람이 알아보기 어렵다. Working Directory는 실제 파일로 존재한다. 바로 눈에 보이기 때문에 사용자가 편집하기 수월하다. Working Directory는 샌드박스로 생각하자. 커밋하기 전에는 Index(Staging Area)에 올려놓고 얼마든지 변경할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;revert-vs-reset&quot;&gt;Revert vs Reset&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;git revert : cherry-pick의 반대. 해당 커밋을 되돌리는 커밋을 새로 생성한다. - &lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EA%B3%A0%EA%B8%89-Merge#_reverse_commit&quot;&gt;예제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;git reset –hard &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;이전 커밋&amp;gt;&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;HEAD의 브랜치를 지정한 위치로 옮긴다.&lt;/li&gt;
      &lt;li&gt;index를 HEAD의 내용으로 바꾼다.&lt;/li&gt;
      &lt;li&gt;
        &lt;dl&gt;
          &lt;dt&gt;working directory를 index의 내용으로 완전히 바꾼다.&lt;/dt&gt;
          &lt;dd&gt;이전 커밋으로 내용을 완전히 바꿀때는 reset을 쓴다. 하지만 해당 커밋이 다른 사람들과 공유하고 있는 히스토리이라면 안쓰는게 좋다. &lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0#_rebase_peril&quot;&gt;rebase의 위험성&lt;/a&gt; 참고.&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rebase의-활용&quot;&gt;Rebase의 활용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;커밋 메시지만 수정하기&lt;/li&gt;
  &lt;li&gt;커밋 메시지들 병합하기&lt;/li&gt;
  &lt;li&gt;병합하기 (아래의 병합 전략 - &lt;strong&gt;Merge vs Rebase 참고&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;커밋-메시지만-수정하기&quot;&gt;커밋 메시지만 수정하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EB%8B%A8%EC%9E%A5%ED%95%98%EA%B8%B0#_changing_multiple&quot;&gt;참고&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase -i HEAD~3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file

# Rebase 710f0f8..a5f4a0d onto 710f0f8
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like &quot;squash&quot;, but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;수정할 커밋들만 pick -&amp;gt; edit으로 수정.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commit --amend&lt;/code&gt; 으로 커밋 내용을 수정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase --continue&lt;/code&gt;으로 다음 edit설정한 커밋으로 넘어감.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;커밋-메시지들-병합하기&quot;&gt;커밋 메시지들 병합하기&lt;/h3&gt;

&lt;p&gt;위의 예제에서 수정할 커밋들만 &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;fixup&lt;/code&gt;으로 수정.&lt;/p&gt;

&lt;h2 id=&quot;병합-전략---merge-vs-rebase&quot;&gt;병합 전략 - Merge vs Rebase&lt;/h2&gt;

&lt;figure class=&quot; &quot;&gt;
  
    
      &lt;a href=&quot;/assets/images/posts/git_merge_vs_rebase.png&quot;&gt;
        &lt;img src=&quot;/assets/images/posts/git_merge_vs_rebase.png&quot; alt=&quot;&quot; /&gt;
      &lt;/a&gt;
    
  
  
&lt;/figure&gt;

&lt;h3 id=&quot;merge&quot;&gt;Merge&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Merge 브랜치에서 사용하는 전략은 각 브랜치의 마지막 커밋 두 개와 공통 조상의 총 3개의 커밋을 이용하는 3-way merge를 수행하여 새로운 커밋을 만들어내는 것입니다. - &lt;a href=&quot;https://velog.io/@godori/Git-Rebase&quot;&gt;Git Rebase 활용하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rebase&quot;&gt;Rebase&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;연속해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick&lt;/code&gt; 하는 효과. base를 병합하고자하는 브랜치의 커밋들로 채우고, 그 이후 나의 커밋들을 그 위에 올려놓는 형태.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rebase-vs-stash&quot;&gt;Rebase vs Stash&lt;/h2&gt;

&lt;p&gt;Rebase : 커밋한 것들을 기준으로 작업함.
Stash : add 하기 전의 변경사항들을 대상으로 함.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;커맨드-정리&quot;&gt;커맨드 정리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;git shortlog : 한줄짜리 로그&lt;/li&gt;
  &lt;li&gt;git blame : 파일의 각 코드 줄마다 누가 언제 커밋을 했는지 히스토리 추적&lt;/li&gt;
  &lt;li&gt;git show &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;commit-id&amp;gt;&lt;/code&gt; :  commit-id에 해당하는 커밋 정보를 확인함. 생략시 HEAD의 가장 최신 커밋을 확인함&lt;/li&gt;
  &lt;li&gt;git cherry-pick : 원하는 커밋만 가져오기 - &lt;a href=&quot;https://git-scm.com/book/ko/v2/Appendix-C%3A-Git-%EB%AA%85%EB%A0%B9%EC%96%B4-Patch-%ED%95%98%EA%B8%B0&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;git format-patch &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;commit-id&amp;gt;&lt;/code&gt; : 여러 커밋을 patch파일로 만들기(주로 오픈소스 관리자(Committer)에게 이메일로 주고 패치해달라고 할 때 사용한다고 함.)&lt;/li&gt;
  &lt;li&gt;git am : patch 파일을 적용할때 사용함.&lt;/li&gt;
  &lt;li&gt;git fetch : 원격 저장소의 데이터를 로컬에 가져오기만 하기.&lt;/li&gt;
  &lt;li&gt;git pull : &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;git stash : tracking(이미 커밋한 파일들)중인 파일들의 변경사항들을 임시 저장할 수 있음.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Git Command" /><summary type="html">Git 시스템 이해하기</summary></entry><entry><title type="html">[Design Pattern] Monorepo 공부</title><link href="https://seunghyum.github.io/design%20pattern/Monorepo/" rel="alternate" type="text/html" title="[Design Pattern] Monorepo 공부" /><published>2019-11-10T00:00:00+09:00</published><updated>2019-11-10T00:00:00+09:00</updated><id>https://seunghyum.github.io/design%20pattern/Monorepo</id><content type="html" xml:base="https://seunghyum.github.io/design%20pattern/Monorepo/">&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;결론부터 적자면 Monorepo는 아래의 경우에 써야할 것 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;독립 API로 만들기 어려운, 프로젝트 간 중복되는 공통모듈이 있을 경우&lt;/li&gt;
  &lt;li&gt;Micro 독립 서비스일 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;글 하단의 “언제 쓰면 안될까?” 역시 중요하다.&lt;/p&gt;

&lt;h2 id=&quot;개념&quot;&gt;개념&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;다양한 모듈을 여러 레포지토리에서 관리하지 않고 하나의 레포지토리에서 관리하는 디자인 패턴. &lt;br /&gt;
대표적인 툴 : Lerna, Yarn Workspace&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트간 공유해야할 기능 모듈 및 라이브러리들을 쉽게 공유할 수 있다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 변경은 단일 원자 단위로 간주 및 검토 할수 있다.&lt;/p&gt;

    &lt;h3 id=&quot;프로젝트간-공유해야할-기능-모듈-및-라이브러리들을-쉽게-공유할-수-있다&quot;&gt;프로젝트간 공유해야할 기능 모듈 및 라이브러리들을 쉽게 공유할 수 있다.&lt;/h3&gt;

    &lt;p&gt;가령 모바일과 데스크탑 프로젝트가 별개로 존재할때 이 둘이 사용하는 회원관리 로직은 동일할 것이다. &lt;br /&gt;
예를들어 REST API에 회원가입 요청은&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /v1/user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;로 요청을 보내고 받은 응답을 관리하고 상태관리를 하는 방식도 동일할 것이다.&lt;br /&gt;
각자의 레포지토리에서 이 둘이 공통으로 사용하는 기능을 모듈화하고 공유하는 작업은 복잡할 수 있다. &lt;br /&gt;
모노레포는 이러한 설계를 쉽게 설정할 수 있다. &lt;br /&gt;
쉽게 공유하고 공통으로 관리할 수 있다는 것은 곧 &lt;strong&gt;모듈화 리팩토링이 저렴해진다&lt;/strong&gt;는 장점 또한 있다고 할 수 있다.&lt;/p&gt;

    &lt;h3 id=&quot;모든-변경은-단일-원자-단위로-간주-및-검토-할수-있다&quot;&gt;모든 변경은 단일 원자 단위로 간주 및 검토 할수 있다.&lt;/h3&gt;

    &lt;p&gt;다시말해 모든 이슈들은 Monorepo에서 검토 할수 있다.&lt;br /&gt;
가령 프론트엔드 프로젝트와 백엔드 서버 프로젝트가 따로 존재할때, 각각의 이슈, 버전 등의 관리를 하나의 레포지토리에서 할 수 있다.&lt;br /&gt;
또한 위의 구조에서 두 서비스를 연동해서 빌드, 테스트, 배포 프로세스를 한번에 진행하기 위해서는 따로 작업해야할 것들이 많아진다.&lt;br /&gt;
하지만 Monorepo에서는 한번에 처리할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;단점&quot;&gt;단점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;러닝커브&lt;/li&gt;
  &lt;li&gt;초기 세팅이 다소 복잡함&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언제-써야할까&quot;&gt;언제 써야할까?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;공통으로 쓰는 모듈들이 많을 경우. &lt;small&gt;ex) 모바일 웹과 데스크탑 웹을 따로 만들경우&lt;/small&gt;&lt;/li&gt;
  &lt;li&gt;Micro 독립 서비스일 경우 -&amp;gt; 이슈관리, 버전관리, 배포 및 테스트 관리를 한곳에서 할수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;언제-쓰면-안될까&quot;&gt;언제 쓰면 안될까?&lt;/h2&gt;

&lt;p&gt;: Mono Repo를 쓰지 말아야할 경우 = Multiple Repo로 관리해야할 경우&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고 : &lt;small&gt;&lt;a href=&quot;https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/&quot;&gt;Why you should use a single repository for all your company’s projects&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로젝트 전체 혹은 부분적으로 오픈소스 프로젝트일 경우.&lt;/li&gt;
  &lt;li&gt;SI 작업같은 클라이언트 마다 다른 프로젝트일 경우. 저작권을 고객에게 넘겨야하는 경우.&lt;/li&gt;
  &lt;li&gt;리눅스 커널같이 1.5억 줄 이상의 큰 프로젝트일 경우. 단일 프로젝트에서만 동작해야하는 경우.&lt;/li&gt;
  &lt;li&gt;기존에 만들어 놓은 다중레포(Multiple Repo) 구조가 CI/CD 등에 맞게 설계되어 있고 단일레포(Monorepo)로의 마이그레이션 비용이 엄청 큰 경우.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;공부-배경과-그에-따른-결론&quot;&gt;공부 배경과 그에 따른 결론&lt;/h2&gt;

&lt;p&gt;회사 프로젝트를 초기부터 빌드해야하는데 어떻게 디자인할지 조사하다가 정리하게 되었다. &lt;br /&gt;
프로젝트의 상황은 이렇다&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;내가 만들어야할 프로젝트는 기존의 비슷한 프로젝트가 이미 하나 있음.&lt;/li&gt;
  &lt;li&gt;버전을 업하며 리팩토링을 할 예정이지만 관리비용을 줄이기 위해 비슷하게 가야함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;기존의 회사의 프로젝트들의 상황은 이렇다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다중 프로젝트들로 이미 마들어졌고 그에 따른 CI/CD 구조가 정립되어 있다. -&amp;gt; 마이그레이션 비용이 클 수 있다.&lt;/li&gt;
  &lt;li&gt;내가 만들 프로젝트가 이미 다중 레포로 만들어진 백엔드 서버에 따라 개발되어야 함.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 상황들은 모노레포로 얻을 수 있는 단일성이 없기 때문에 다중 레포로 관리해야할 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/&quot;&gt;Workspaces in Yarn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/&quot;&gt;Why you should use a single repository for all your company’s projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Monorepo" /><summary type="html">결론</summary></entry><entry><title type="html">[Methodology] CDD(Component Driven Development) - 테스트(2/2)</title><link href="https://seunghyum.github.io/frontend/methodology/CDD-2/" rel="alternate" type="text/html" title="[Methodology] CDD(Component Driven Development) - 테스트(2/2)" /><published>2019-11-09T00:00:00+09:00</published><updated>2019-11-09T00:00:00+09:00</updated><id>https://seunghyum.github.io/frontend/methodology/CDD-2</id><content type="html" xml:base="https://seunghyum.github.io/frontend/methodology/CDD-2/">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;회사 프로젝트 중 어드민 페이지를 Element UI 기반으로 만들기로 했다. 연습삼아 몇개의 컴포넌트, 뷰를 storybook으로 엮어보며 효용성을 확인해보았다.&lt;/p&gt;

&lt;h2 id=&quot;repo&quot;&gt;Repo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Seunghyum/storybook-test&quot;&gt;Storybook-test&lt;/a&gt; : vue-admin-template with storybook. test for storybook.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;페이지 단위 개발이 아닌 컴포넌트 단위 개발을 css 커스텀부터 깊게 들어가는 환경이라면 좋을 것 같다. 
하지만 나처럼 css 프레임워크가 이미 있는 단계라면 오버 엔지니어링이 될 것 같다. &lt;strong&gt;커스텀이 많을 때만 사용하도록 하자.&lt;/strong&gt;
차다리 커스텀 UI 컴포넌트들만 &lt;a href=&quot;https://bit.dev/&quot;&gt;Bit&lt;/a&gt;같은 컴포넌트 공유 플랫폼에 등록하여 관리하는 것이 더 좋을 듯 하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디자이너와의 협업 : 굳이 Storybook을 디자이너와 협업용으로 쓸 필요는 많이 없을 것 같다. 외부 css 프레임워크를 쓰고 있다면 오버 엔지니어링일 수 있다.&lt;/li&gt;
  &lt;li&gt;UI 단위 테스트 : 사용해보지는 않았지만 화면 크기 단위로 시각테스트를 해볼 수 있음. jest같은 툴도 적용하기 좋게 되어 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tip-for-storybook&quot;&gt;Tip for Storybook&lt;/h2&gt;

&lt;p&gt;: 기본적으로 다 문서에 나오는 얘기들. 그중 삽질 안하는 Tip&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storybook으로 띄우는 로컬은 루트 프로젝트와는 asset 설정(외부 라이브러리 css&amp;amp;js..), 웹팩 설정등이 별도이다. 프로젝트를 루트와 동일하게 띄우려면 .storybook/plugin.js의 ElementUi 처럼 가져와야함.&lt;/li&gt;
  &lt;li&gt;.storbook 폴더안에 webpack.config.js 설정을 root의 웹팩 설정(여기선 vue.config.js) 와 동일하게 해주어야함.
    &lt;ul&gt;
      &lt;li&gt;예를들어 ‘@’ 경로라던지, vue-loader, css-loader 등의 컴파일 설정이라든지.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;알게된-점&quot;&gt;알게된 점&lt;/h2&gt;

&lt;h3 id=&quot;ui-컴포넌트&quot;&gt;UI 컴포넌트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Element-ui 처럼 css 프레임워크가 있는 경우, Storybook은 css 프레임워크가 제공하지 않는 커스텀한 UI 컴퍼넌트를 대상으로만 해야함.(ex - &lt;a href=&quot;https://ui.toast.com/&quot;&gt;Toast UI&lt;/a&gt;의 다양한 컴포넌트들, Datepicker)&lt;/li&gt;
  &lt;li&gt;이외의 기초적인 UI 컴퍼넌트(버튼, 모달 등)들은 커스텀이 많지 않을 경우 오버 엔지니어링일 수 있음.&lt;/li&gt;
  &lt;li&gt;컬러같은 디테일들은 확인들은 제플린 같은 툴로 확인하는게 더 나아보임.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;스태틱-뷰404에러-스태틱페이지들&quot;&gt;스태틱 뷰(404에러, 스태틱페이지들)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;오버 엔지니어링 : 페이지를 쉽게 확인할 수 있지만 꼭 Storybook으로 컴파일하지 않아도 확인할 방법은 얼마든지 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고문서&quot;&gt;참고문서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.learnstorybook.com/intro-to-storybook/vue/en/get-started/&quot;&gt;Storybook for Vue tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://storybook.js.org/docs/basics/writing-stories&quot;&gt;Storybook document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Methodology" /><summary type="html">Intro</summary></entry><entry><title type="html">[Methodology] CDD(Component Driven Development) - 계획(1/2)</title><link href="https://seunghyum.github.io/frontend/methodology/CDD/" rel="alternate" type="text/html" title="[Methodology] CDD(Component Driven Development) - 계획(1/2)" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>https://seunghyum.github.io/frontend/methodology/CDD</id><content type="html" xml:base="https://seunghyum.github.io/frontend/methodology/CDD/">&lt;h2 id=&quot;cddcomponent-driven-development란&quot;&gt;CDD(Component Driven Development)란?&lt;/h2&gt;

&lt;p&gt;페이지 단위로 UI 개발이 이루어지는 것과는 반대로 UI 컴포넌트들부터 만들고 이를 기반으로 페이지를 구성.&lt;/p&gt;

&lt;p&gt;예시 : &lt;a href=&quot;https://airbnb.io/react-dates/?path=/story/daterangepicker-drp--default&quot;&gt;AirBnB Dates UI Storybook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 초기부터 UI 컴포넌트를 중심으로&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Modal&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Chart&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;와 같이 개발하여 아래의 이점들을 얻기 위함이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;디자인 체계화 &amp;amp; 디자이너와 효율적인 협업 : &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt; 같은 UI 컴포넌트 익스플러어 툴을 통해 체계적으로 관리, 디자이너와 쉽게 소통.&lt;/li&gt;
  &lt;li&gt;평행화 개발(Parallelize development) : 다른 프로젝트에서도 쉽게 쓰고 공유 가능.&lt;/li&gt;
  &lt;li&gt;Decoupling : CSS, JS, I18n, UI 단위 테스트 등&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;글을-쓰게된-배경&quot;&gt;글을 쓰게된 배경&lt;/h2&gt;

&lt;p&gt;회사에서 2.0 버전의 웹 서비스를 CDD 방식으로 개발할 계획이다. &lt;br /&gt;
나름의 설계안을 만들어 세미나 시간에 제시해보고자 한다.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;현재 프론트엔드는 UI컴포넌트들이 CSS로만 정의되어 사용되고 있다(ex - Bootstrap)&lt;br /&gt;
이런 방식이 코드 재사용성과 UI 컴포넌트별 디커플링이 잘 안되는 문제가 있는 듯하다.&lt;br /&gt;
이것을 CDD답게 설계하여 다양한 제품별 웹 서비스들에 적용할 계획이다.&lt;br /&gt;
&lt;br /&gt;
각 프로젝트 별로 프론트엔드 개발자가 따로 있다. &lt;br /&gt;
이들간의 협업 효율성과 디자이너와의 소통을 관리하는데 효율적인 방법을 위한 툴 또한 찾아보았다. &lt;br /&gt;
&lt;br /&gt;
처음엔 Storybook 프로젝트를 만들어 Monorepo 방식으로 다른 프로젝트 레포에서 Storybook 레포를 가져다 쓰는 것을 생각했다.&lt;br /&gt;
하지만 이럴경우 Webpack설정을 잘 컨트롤해야하고 로컬에 필요없는 UI 컴포넌트들까지 불러와야하는 점이 불필요하다고 생각했다. &lt;br /&gt;
그래서 이 점을 보완할 수 있는 방법도 찾아보았다.&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;도입할-툴과-용도&quot;&gt;도입할 툴과 용도&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bit.dev/&quot;&gt;Bit&lt;/a&gt; : UI 컴포넌트의 라이브러리화
    &lt;ul&gt;
      &lt;li&gt;각 프로젝트에서 필요한 UI 컴포넌트만 가져옴(Tree shaking)&lt;/li&gt;
      &lt;li&gt;평행화 개발(Parallelize development)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt; : UI 컴포넌트 익스플로러
    &lt;ul&gt;
      &lt;li&gt;UI의 체계적인 관리.&lt;/li&gt;
      &lt;li&gt;어떤 UI컴포넌트들이 있는지 쉽게 파악&lt;/li&gt;
      &lt;li&gt;쉬운 비쥬얼 테스트 : 웹에 배포하여 디자이너와 쉽게 소통.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;workflow&quot;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;with 디자이너 : 디바이스 스크린 규격을 확인해보며 피드백 줄 수 있도록 함.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;회사에서 쓰는 Storybook 페이지를 만들어 모든 UI 컴포넌트를 담은 프로젝트를 웹에 배포.&lt;/li&gt;
  &lt;li&gt;단, 개발자들은 각각의 UI 컴포넌트 라이브러리 배포때마다 Storybook에 등록 후 재배포&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with 다른 프로젝트의 프론트엔드 개발자&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;프로젝트에 필요한 UI 컴포넌트 들부터 개발&lt;/li&gt;
  &lt;li&gt;Bit에 Publish(= npm 라이브러리 등록)&lt;/li&gt;
  &lt;li&gt;다른 프로젝트 개발자가 Consume(= npm install)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모든 UI를 처음부터 빌드한다기보다 참고한 라이브러리를 재가공하여 등록하는 방식으로 효율성을 높일 것 같다. &lt;br /&gt;
예를들어&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Element UI&lt;/li&gt;
  &lt;li&gt;Datepicker 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등을 커스텀 하는 수준으로 진행할 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@yesdoing/%EB%B2%88%EC%97%AD-Component-Driven-Development-udjzqwqgay&quot;&gt;[번역] - Component-Driven Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.hichroma.com/the-crucial-tool-for-modern-frontend-engineers-fb849b06187a&quot;&gt;UI component explorers — your new favorite tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Methodology" /><summary type="html">CDD(Component Driven Development)란?</summary></entry><entry><title type="html">GraphQL, Prisma, Apollo 공부</title><link href="https://seunghyum.github.io/graphql/prisma/apollo/GraphQL-Apollo-Prisma/" rel="alternate" type="text/html" title="GraphQL, Prisma, Apollo 공부" /><published>2019-11-05T00:00:00+09:00</published><updated>2019-11-05T00:00:00+09:00</updated><id>https://seunghyum.github.io/graphql/prisma/apollo/GraphQL-Apollo-Prisma</id><content type="html" xml:base="https://seunghyum.github.io/graphql/prisma/apollo/GraphQL-Apollo-Prisma/">&lt;h2 id=&quot;graphql-restful&quot;&gt;GraphQL? RESTful?&lt;/h2&gt;

&lt;p&gt;: GrpahQL과 RESTful은 각각의 장단점이 있음.&lt;/p&gt;

&lt;h3 id=&quot;restful&quot;&gt;RESTful&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;PDF, Excel File 전송같은 단순 Text로 처리되지 않는 요청이 있을때&lt;/li&gt;
  &lt;li&gt;요청의 구조가 다양하지 않고 정해져 있는경우.&lt;/li&gt;
  &lt;li&gt;API명세서가 제대로 안됨(대부분의 회사들이 아예 없거나 업데이트가 안됨)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;graphql&quot;&gt;GraphQL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;한번에 여러 요청들에 응답해야할때.&lt;/li&gt;
  &lt;li&gt;대부분의 요청이 CRUD일때&lt;/li&gt;
  &lt;li&gt;API명세서를 만들 필요가 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API서버 구축시 두 방법을 섞어쓰는 것은 품질을 떨어뜨릴 수 있음. 각각의 장점을 살릴수 있는 설계가 필요.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;개념&quot;&gt;개념&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;SQL(Structed Query Language)&lt;/em&gt;은 &lt;strong&gt;데이터베이스 시스템&lt;/strong&gt;에 저장된 데이터를 효율적으로 가져오는 것&lt;br /&gt;
&lt;em&gt;GQL(Graph Query Language)&lt;/em&gt;은 &lt;strong&gt;웹 클라이언트&lt;/strong&gt;가 데이터를 서버로 부터 효율적으로 가져오는 것&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 Endpoint를 사용
    &lt;ul&gt;
      &lt;li&gt;HTTP요청 횟수 감소 : RESTful은 원하는 리소스를 종류별로 다른 Endpoint에서 호출해야할 경우가 많음. 반면 &lt;strong&gt;GraphQL은 하나의 Endpoint&lt;/strong&gt;에서 원하는 리소스를 모두 담아 요청하는 것이 가능.&lt;/li&gt;
      &lt;li&gt;HTTP응답의 size 감소 : 필요한 부분만 요청할수 있음. Under-Fetching, Over-Fetching 해결&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;인트로스펙션(introspection) 비용감소
    &lt;ul&gt;
      &lt;li&gt;: 쿼리용 IDE를 만등어줘서 API 명세서를 따로 안만들어도 됨. 기존에는 API 명세서를 만들어 프론트엔드 개발자와 백엔드 개발자가 소통해야 했음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;요청할때 사용한 Query문에 따라 응답의 구조가 달라짐.&lt;/li&gt;
  &lt;li&gt;어떠한 프로토콜(TCP/UDP, Websocket) 에서도 사용가능. &lt;em&gt;프로그래밍 언어일 뿐이니까!&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;NoSQL DB나 RDB 상관 없이 사용가능. &lt;em&gt;프로그래밍 언어일 뿐이니까!&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;사용가능한 아키텍처 - &lt;a href=&quot;https://www.tutorialspoint.com/graphql/graphql_architecture.htm&quot;&gt;자세한 설명&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;GraphQL server with connected database&lt;/li&gt;
      &lt;li&gt;GraphQL server that integrates existing systems&lt;/li&gt;
      &lt;li&gt;Hybrid approach&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문법&quot;&gt;문법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;작업 유형
    &lt;ul&gt;
      &lt;li&gt;Query: 데이터를 받아옴(GET)
        &lt;ul&gt;
          &lt;li&gt;여러 query 요청은 내부에서 병렬로 수행됨&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Mutation: 데이터를 생성(Post), 수정(PUT, PATCH), 삭제(DELETE)
        &lt;ul&gt;
          &lt;li&gt;여러 mutation 요청은 내부에서 직렬(차례대)로 수행됨. 따라서 2개의 mutation 요청을 보냈을때 2번째 요청이 수행되지 않았다면 첫번째 요청은 수행됐다는 것. … &lt;a href=&quot;https://graphql.org/learn/queries/#multiple-fields-in-mutations&quot;&gt;Multiple Fields In Mutations&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Subscription: 웹소켓을 사용해 실시간 양방향 통신 구현&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Query : 어떤 Request를 받을 건지&lt;/li&gt;
  &lt;li&gt;Resolver : GQL은 언어일 뿐. 해당 리퀘스트를 어떻게 처리할 것인지를 자유롭게 설정. 텍스트 파일에서 읽어올 수도 있음.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;실제-사용&quot;&gt;실제 사용&lt;/h2&gt;

&lt;p&gt;: Graphql은 단지 언어 일뿐. 클라이언트와 서버 사이드에서 사용하려면 보조해주는 라이브러리가 필요.&lt;/p&gt;

&lt;h3 id=&quot;클라이언트쪽에서-사용하려면&quot;&gt;클라이언트쪽에서 사용하려면&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://relay.dev/&quot;&gt;릴레이(Relay)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apollographql.com/&quot;&gt;아폴로(Apollo GraphQL)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;둘 중 하나 선택. Apollo가 현재상황에선 더 쓰기 편함.
&lt;br /&gt;&lt;br /&gt;
&lt;small&gt;내부적으로 DFS(Deep First Search)로 로직이 수행되어서 Graph QL이 된것 같다고함.. &lt;a href=&quot;https://tech.kakao.com/2019/08/01/graphql-basic/&quot;&gt;Kakao Tech&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;서버쪽에서-사용하려면&quot;&gt;서버쪽에서 사용하려면&lt;/h3&gt;

&lt;p&gt;3가지 방법이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;리졸버에서 SQL을 직접 다루는것&lt;/li&gt;
  &lt;li&gt;ORM으로 다루는 것&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.prisma.io/with-graphql/&quot;&gt;Prisma&lt;/a&gt; 사용. (동작방식은 ORM과 비슷)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1번&lt;/strong&gt;의 단점은 쿼리가 보통 단순 스트링으로 전달되기 때문에 개발환경 차원에서 쿼리를 검사하기 까다로움.&lt;br /&gt;
&lt;strong&gt;2번&lt;/strong&gt;은 단점이 있다기 보다는 &lt;strong&gt;3번&lt;/strong&gt; 선택지가 더 좋은 방법인 듯 함.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Prisma는 쿼리 리졸빙을 처리해주는 편리한 데이터 접근 계층을 제공하여 상기한 문제를 해결해줍니다. &lt;br /&gt;
Prisma를 사용하면, 서버로 들어온 쿼리를 Prisma에 전달하고, Prisma는 이를 받아 실제 데이터베이스에 맞추어 쿼리를 리졸브하는 식으로 리졸버를 구현하게 됩니다. &lt;br /&gt;
Prisma Client 덕분에, 리졸버 구현은 대부분의 경우 한두 줄로 구현이 가능할 정도로 간단명료한 과정입니다.&lt;br /&gt;
&lt;small&gt;velog 님 블로그 - &lt;a href=&quot;https://velog.io/@cadenzah/graphql-node-05-database&quot;&gt;GraphQL - Node Tutorial - 05. Adding a Database&lt;/a&gt;&lt;/small&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt;api 서버에 Prisma Client가 있고 따로 Prisma Server가 데이터베이스 앞단에서 데이터베이스를 관리함. &lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Prisma 장점 정리 - &lt;a href=&quot;https://medium.com/labelstore/prisma%EB%A1%9C-graphql%EC%9D%84-%EC%89%BD%EA%B2%8C-%EB%8F%84%EC%9E%85%ED%95%98%EA%B8%B0-fa64dcf63382&quot;&gt;퍼옴&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;GraphQL 형식의 데이터모델만 작성하면 사용하는 언어와 DBMS에 구애받지 않고, ORM 클라이언트와 모델, 그리고 Data Schema 가 자동으로 생성된다.&lt;/li&gt;
  &lt;li&gt;GraphQL 형식의 DataModel을 정의하면 Prisma가 알아서 사용하고있는 DBMS와 언어의 종류에 맞게 실제 DB 배포부터, 클라이언트와 모델 그리고 타입정의까지 자동으로 만들어 제공해 줍니다.&lt;/li&gt;
  &lt;li&gt;자체 어드민 페이지를 제공하여 쉬운 데이터 운용이 가능하다. (비개발자도 손쉽게 쓸 수 있을 정도.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/graphql&quot;&gt;TutorialsPoint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.holaxprogramming.com/2018/01/20/graphql-vs-restful-api/&quot;&gt;GraphQL과 RESTful API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kakao.com/2019/08/01/graphql-basic/&quot;&gt;Kakao Tech&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/labelstore/prisma%EB%A1%9C-graphql%EC%9D%84-%EC%89%BD%EA%B2%8C-%EB%8F%84%EC%9E%85%ED%95%98%EA%B8%B0-fa64dcf63382&quot;&gt;Prisma로 GraphQL을 쉽게 도입하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/Kivol/graphql-in-action-rest&quot;&gt;REST와 이별할 때 생각해야 하는 것들&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;더-읽고-정리&quot;&gt;더 읽고 정리&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/netflix-techblog/our-learnings-from-adopting-graphql-f099de39ae5f&quot;&gt;Our learnings from adopting GraphQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/netflix-techblog/graphql-search-indexing-334c92e0d8d5&quot;&gt;GraphQL Search Indexing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="GraphQL" /><category term="Prisma" /><category term="Apollo" /><summary type="html">GraphQL? RESTful?</summary></entry><entry><title type="html">[CodingTest] Combination(조합) 문제풀이 2</title><link href="https://seunghyum.github.io/codingtest/Combination-2/" rel="alternate" type="text/html" title="[CodingTest] Combination(조합) 문제풀이 2" /><published>2019-11-03T00:00:00+09:00</published><updated>2019-11-03T00:00:00+09:00</updated><id>https://seunghyum.github.io/codingtest/Combination-2</id><content type="html" xml:base="https://seunghyum.github.io/codingtest/Combination-2/">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;p&gt;: 옷 조합구하기&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주어지는 clothes 배열을 조합하여 입을 수 있는 옷 조합 개수를 구하기&lt;/li&gt;
  &lt;li&gt;제한조건
    &lt;ul&gt;
      &lt;li&gt;최소 1개는 입어야함.&lt;/li&gt;
      &lt;li&gt;같은 카테고리의 옷은 못입음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;입력설명&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  [ [ &amp;lt;옷&amp;gt;, &amp;lt;옷 카테고리&amp;gt; ] ... ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;clothes&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[[“yellow_hat”, “headgear”], [“blue_sunglasses”, “eyewear”], [“green_turban”, “headgear”]]&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[[“crow_mask”, “face”], [“blue_sunglasses”, “face”], [“smoky_makeup”, “face”]]&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;작성한-답&quot;&gt;작성한 답&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clothes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;clothes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numOfkeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combinationOfClothes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;combinationOfClothes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;getCombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numOfkeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numOfkeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;getCombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;combinationOfClothes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yellow_hat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;headgear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue_sunglasses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eyewear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;green_turban&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;headgear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;crow_mask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;face&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue_sunglasses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;face&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;smoky_makeup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;face&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Javascript" /><category term="Combination" /><summary type="html">문제</summary></entry><entry><title type="html">[CodingTest] Combination(조합) 문제풀이 1</title><link href="https://seunghyum.github.io/codingtest/Combination-1/" rel="alternate" type="text/html" title="[CodingTest] Combination(조합) 문제풀이 1" /><published>2019-11-03T00:00:00+09:00</published><updated>2019-11-03T00:00:00+09:00</updated><id>https://seunghyum.github.io/codingtest/Combination-1</id><content type="html" xml:base="https://seunghyum.github.io/codingtest/Combination-1/">&lt;h2 id=&quot;문제&quot;&gt;문제&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;주어진 숫자(nums) 중 3개의 수를 더했을 때,&lt;/li&gt;
  &lt;li&gt;소수가 되는 경우의 개수를 구하시오.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;입출력 예시&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;nums&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[1,2,3,4]&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[1,2,7,6,4]&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;작성한-답&quot;&gt;작성한 답&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;combinationOfSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;combinationOfSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;getCombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialStuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getCombination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;combinationOfSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;참고한-자료&quot;&gt;참고한 자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40200089/number-prime-test-in-javascript&quot;&gt;Number prime test in Javascript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/community/blogs/hazem/entry/javascript_getting_all_possible_combinations?lang=en&quot;&gt;Getting All Possible Combinations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;배운점&quot;&gt;배운점&lt;/h2&gt;

&lt;p&gt;: 소수를 구하는 방식&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5811151/why-do-we-check-up-to-the-square-root-of-a-prime-number-to-determine-if-it-is-pr&quot;&gt;Stack Overflow관련 글 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;만일 n이 소수가 아니고, n이 a와 b로 구성된다면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;n = a * b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 a와 b 둘다 n의 제곱근 보다 크다면, a * b는 n보다 크다.&lt;br /&gt;
따라서 적어도 둘중 하나는 반드시 n의 제곱근보다 작거나 같아야한다. &lt;br /&gt;
그리고 만약 n의 제곱근보다 작거나 같은 수를 못구한다면 그 수는 소수이다.
&lt;br /&gt;&lt;br /&gt;
코드로 나타내면 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Moon Seung Hyun</name><email>antmgu@gmail.com</email></author><category term="Javascript" /><category term="Combination" /><summary type="html">문제</summary></entry></feed>